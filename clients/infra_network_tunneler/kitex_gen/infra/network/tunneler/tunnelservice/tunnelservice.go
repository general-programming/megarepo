// Code generated by Kitex v0.4.4. DO NOT EDIT.

package tunnelservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	tunneler "github.com/general-programming/megarepo/clients/infra_network_tunneler/kitex_gen/infra/network/tunneler"
)

func serviceInfo() *kitex.ServiceInfo {
	return tunnelServiceServiceInfo
}

var tunnelServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "TunnelService"
	handlerType := (*tunneler.TunnelService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetTunnel": kitex.NewMethodInfo(getTunnelHandler, newTunnelServiceGetTunnelArgs, newTunnelServiceGetTunnelResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "tunneler",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func getTunnelHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*tunneler.TunnelServiceGetTunnelArgs)
	realResult := result.(*tunneler.TunnelServiceGetTunnelResult)
	success, err := handler.(tunneler.TunnelService).GetTunnel(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTunnelServiceGetTunnelArgs() interface{} {
	return tunneler.NewTunnelServiceGetTunnelArgs()
}

func newTunnelServiceGetTunnelResult() interface{} {
	return tunneler.NewTunnelServiceGetTunnelResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetTunnel(ctx context.Context, req *tunneler.GetTunnelRequest) (r *tunneler.GetTunnelResponse, err error) {
	var _args tunneler.TunnelServiceGetTunnelArgs
	_args.Req = req
	var _result tunneler.TunnelServiceGetTunnelResult
	if err = p.c.Call(ctx, "GetTunnel", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
