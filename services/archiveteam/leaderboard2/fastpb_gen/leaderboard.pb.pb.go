// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: leaderboard.pb

package fastpb_gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WarriorMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAgent string `protobuf:"bytes,1,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	Version   string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *WarriorMeta) Reset() {
	*x = WarriorMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leaderboard_pb_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarriorMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarriorMeta) ProtoMessage() {}

func (x *WarriorMeta) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboard_pb_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarriorMeta.ProtoReflect.Descriptor instead.
func (*WarriorMeta) Descriptor() ([]byte, []int) {
	return file_leaderboard_pb_rawDescGZIP(), []int{0}
}

func (x *WarriorMeta) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *WarriorMeta) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type TrackerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values map[string]float64 `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	Queues map[string]float64 `protobuf:"bytes,2,rep,name=queues,proto3" json:"queues,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *TrackerStats) Reset() {
	*x = TrackerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leaderboard_pb_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackerStats) ProtoMessage() {}

func (x *TrackerStats) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboard_pb_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackerStats.ProtoReflect.Descriptor instead.
func (*TrackerStats) Descriptor() ([]byte, []int) {
	return file_leaderboard_pb_rawDescGZIP(), []int{1}
}

func (x *TrackerStats) GetValues() map[string]float64 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *TrackerStats) GetQueues() map[string]float64 {
	if x != nil {
		return x.Queues
	}
	return nil
}

type TrackerEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project          string             `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Downloader       string             `protobuf:"bytes,2,opt,name=downloader,proto3" json:"downloader,omitempty"`
	LogChannel       string             `protobuf:"bytes,3,opt,name=log_channel,json=logChannel,proto3" json:"log_channel,omitempty"`
	Timestamp        float64            `protobuf:"fixed64,4,opt,name=timestamp,json=ts,proto3" json:"timestamp,omitempty"`
	Bytes            uint64             `protobuf:"varint,10,opt,name=bytes,proto3" json:"bytes,omitempty"`
	SizeMb           float32            `protobuf:"fixed32,11,opt,name=size_mb,json=megabytes,proto3" json:"size_mb,omitempty"`
	Valid            bool               `protobuf:"varint,12,opt,name=valid,proto3" json:"valid,omitempty"`
	IsDuplicate      bool               `protobuf:"varint,13,opt,name=is_duplicate,proto3" json:"is_duplicate,omitempty"`
	Item             string             `protobuf:"bytes,20,opt,name=item,proto3" json:"item,omitempty"`
	Items            []string           `protobuf:"bytes,21,rep,name=items,proto3" json:"items,omitempty"`
	MoveItems        []string           `protobuf:"bytes,22,rep,name=move_items,proto3" json:"move_items,omitempty"`
	ItemRtts         []float64          `protobuf:"fixed64,23,rep,packed,name=item_rtts,proto3" json:"item_rtts,omitempty"`
	WarriorUserAgent string             `protobuf:"bytes,30,opt,name=WarriorUserAgent,json=user_agent,proto3" json:"WarriorUserAgent,omitempty"`
	WarriorVersion   string             `protobuf:"bytes,31,opt,name=WarriorVersion,json=version,proto3" json:"WarriorVersion,omitempty"`
	QueueStats       map[string]float64 `protobuf:"bytes,40,rep,name=queue_stats,json=queuestats,proto3" json:"queue_stats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	Counts           map[string]float64 `protobuf:"bytes,41,rep,name=counts,proto3" json:"counts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	TrackerStats     *TrackerStats      `protobuf:"bytes,42,opt,name=tracker_stats,json=stats,proto3" json:"tracker_stats,omitempty"`
	DomainBytes      map[string]uint64  `protobuf:"bytes,43,rep,name=domain_bytes,proto3" json:"domain_bytes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *TrackerEvent) Reset() {
	*x = TrackerEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leaderboard_pb_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackerEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackerEvent) ProtoMessage() {}

func (x *TrackerEvent) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboard_pb_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackerEvent.ProtoReflect.Descriptor instead.
func (*TrackerEvent) Descriptor() ([]byte, []int) {
	return file_leaderboard_pb_rawDescGZIP(), []int{2}
}

func (x *TrackerEvent) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *TrackerEvent) GetDownloader() string {
	if x != nil {
		return x.Downloader
	}
	return ""
}

func (x *TrackerEvent) GetLogChannel() string {
	if x != nil {
		return x.LogChannel
	}
	return ""
}

func (x *TrackerEvent) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TrackerEvent) GetBytes() uint64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *TrackerEvent) GetSizeMb() float32 {
	if x != nil {
		return x.SizeMb
	}
	return 0
}

func (x *TrackerEvent) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *TrackerEvent) GetIsDuplicate() bool {
	if x != nil {
		return x.IsDuplicate
	}
	return false
}

func (x *TrackerEvent) GetItem() string {
	if x != nil {
		return x.Item
	}
	return ""
}

func (x *TrackerEvent) GetItems() []string {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *TrackerEvent) GetMoveItems() []string {
	if x != nil {
		return x.MoveItems
	}
	return nil
}

func (x *TrackerEvent) GetItemRtts() []float64 {
	if x != nil {
		return x.ItemRtts
	}
	return nil
}

func (x *TrackerEvent) GetWarriorUserAgent() string {
	if x != nil {
		return x.WarriorUserAgent
	}
	return ""
}

func (x *TrackerEvent) GetWarriorVersion() string {
	if x != nil {
		return x.WarriorVersion
	}
	return ""
}

func (x *TrackerEvent) GetQueueStats() map[string]float64 {
	if x != nil {
		return x.QueueStats
	}
	return nil
}

func (x *TrackerEvent) GetCounts() map[string]float64 {
	if x != nil {
		return x.Counts
	}
	return nil
}

func (x *TrackerEvent) GetTrackerStats() *TrackerStats {
	if x != nil {
		return x.TrackerStats
	}
	return nil
}

func (x *TrackerEvent) GetDomainBytes() map[string]uint64 {
	if x != nil {
		return x.DomainBytes
	}
	return nil
}

var File_leaderboard_pb protoreflect.FileDescriptor

var file_leaderboard_pb_rawDesc = []byte{
	0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x62,
	0x12, 0x13, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x22, 0x46, 0x0a, 0x0b, 0x57, 0x61, 0x72, 0x72, 0x69, 0x6f, 0x72,
	0x4d, 0x65, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x92, 0x02,
	0x0a, 0x0c, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x45,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x89, 0x07, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x15,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x02, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x07, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x6d, 0x62, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6d, 0x65,
	0x67, 0x61, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d,
	0x6f, 0x76, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x72, 0x74, 0x74, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x01, 0x52, 0x09,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x72, 0x74, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x10, 0x57, 0x61, 0x72,
	0x72, 0x69, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0e, 0x57, 0x61, 0x72, 0x72, 0x69, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x52, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x29,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x56, 0x0a, 0x0c,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x2b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e,
	0x0a, 0x10, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x4d,
	0x5a, 0x4b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x2d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x32, 0x2f, 0x66, 0x61, 0x73, 0x74, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_leaderboard_pb_rawDescOnce sync.Once
	file_leaderboard_pb_rawDescData = file_leaderboard_pb_rawDesc
)

func file_leaderboard_pb_rawDescGZIP() []byte {
	file_leaderboard_pb_rawDescOnce.Do(func() {
		file_leaderboard_pb_rawDescData = protoimpl.X.CompressGZIP(file_leaderboard_pb_rawDescData)
	})
	return file_leaderboard_pb_rawDescData
}

var file_leaderboard_pb_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_leaderboard_pb_goTypes = []interface{}{
	(*WarriorMeta)(nil),  // 0: archiveteam_tracker.WarriorMeta
	(*TrackerStats)(nil), // 1: archiveteam_tracker.TrackerStats
	(*TrackerEvent)(nil), // 2: archiveteam_tracker.TrackerEvent
	nil,                  // 3: archiveteam_tracker.TrackerStats.ValuesEntry
	nil,                  // 4: archiveteam_tracker.TrackerStats.QueuesEntry
	nil,                  // 5: archiveteam_tracker.TrackerEvent.QueueStatsEntry
	nil,                  // 6: archiveteam_tracker.TrackerEvent.CountsEntry
	nil,                  // 7: archiveteam_tracker.TrackerEvent.DomainBytesEntry
}
var file_leaderboard_pb_depIdxs = []int32{
	3, // 0: archiveteam_tracker.TrackerStats.values:type_name -> archiveteam_tracker.TrackerStats.ValuesEntry
	4, // 1: archiveteam_tracker.TrackerStats.queues:type_name -> archiveteam_tracker.TrackerStats.QueuesEntry
	5, // 2: archiveteam_tracker.TrackerEvent.queue_stats:type_name -> archiveteam_tracker.TrackerEvent.QueueStatsEntry
	6, // 3: archiveteam_tracker.TrackerEvent.counts:type_name -> archiveteam_tracker.TrackerEvent.CountsEntry
	1, // 4: archiveteam_tracker.TrackerEvent.tracker_stats:type_name -> archiveteam_tracker.TrackerStats
	7, // 5: archiveteam_tracker.TrackerEvent.domain_bytes:type_name -> archiveteam_tracker.TrackerEvent.DomainBytesEntry
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_leaderboard_pb_init() }
func file_leaderboard_pb_init() {
	if File_leaderboard_pb != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_leaderboard_pb_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarriorMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leaderboard_pb_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leaderboard_pb_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackerEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_leaderboard_pb_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_leaderboard_pb_goTypes,
		DependencyIndexes: file_leaderboard_pb_depIdxs,
		MessageInfos:      file_leaderboard_pb_msgTypes,
	}.Build()
	File_leaderboard_pb = out.File
	file_leaderboard_pb_rawDesc = nil
	file_leaderboard_pb_goTypes = nil
	file_leaderboard_pb_depIdxs = nil
}
