// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package fastpb_gen

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *WarriorMeta) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_WarriorMeta[number], err)
}

func (x *WarriorMeta) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserAgent, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *WarriorMeta) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Version, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *TrackerStats) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_TrackerStats[number], err)
}

func (x *TrackerStats) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	if x.Values == nil {
		x.Values = make(map[string]float64)
	}
	var key string
	var value float64
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadDouble(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.Values[key] = value
	return offset, nil
}

func (x *TrackerStats) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	if x.Queues == nil {
		x.Queues = make(map[string]float64)
	}
	var key string
	var value float64
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadDouble(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.Queues[key] = value
	return offset, nil
}

func (x *TrackerEvent) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 13:
		offset, err = x.fastReadField13(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 20:
		offset, err = x.fastReadField20(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 21:
		offset, err = x.fastReadField21(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 22:
		offset, err = x.fastReadField22(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 23:
		offset, err = x.fastReadField23(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 30:
		offset, err = x.fastReadField30(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 31:
		offset, err = x.fastReadField31(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 40:
		offset, err = x.fastReadField40(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 41:
		offset, err = x.fastReadField41(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 42:
		offset, err = x.fastReadField42(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 43:
		offset, err = x.fastReadField43(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_TrackerEvent[number], err)
}

func (x *TrackerEvent) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Project, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *TrackerEvent) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Downloader, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *TrackerEvent) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.LogChannel, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *TrackerEvent) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Timestamp, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *TrackerEvent) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.Bytes, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *TrackerEvent) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.SizeMb, offset, err = fastpb.ReadFloat(buf, _type)
	return offset, err
}

func (x *TrackerEvent) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.Valid, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *TrackerEvent) fastReadField13(buf []byte, _type int8) (offset int, err error) {
	x.IsDuplicate, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *TrackerEvent) fastReadField20(buf []byte, _type int8) (offset int, err error) {
	x.Item, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *TrackerEvent) fastReadField21(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Items = append(x.Items, v)
	return offset, err
}

func (x *TrackerEvent) fastReadField22(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.MoveItems = append(x.MoveItems, v)
	return offset, err
}

func (x *TrackerEvent) fastReadField23(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v float64
			v, offset, err = fastpb.ReadDouble(buf, _type)
			if err != nil {
				return offset, err
			}
			x.ItemRtts = append(x.ItemRtts, v)
			return offset, err
		})
	return offset, err
}

func (x *TrackerEvent) fastReadField30(buf []byte, _type int8) (offset int, err error) {
	x.WarriorUserAgent, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *TrackerEvent) fastReadField31(buf []byte, _type int8) (offset int, err error) {
	x.WarriorVersion, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *TrackerEvent) fastReadField40(buf []byte, _type int8) (offset int, err error) {
	if x.QueueStats == nil {
		x.QueueStats = make(map[string]float64)
	}
	var key string
	var value float64
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadDouble(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.QueueStats[key] = value
	return offset, nil
}

func (x *TrackerEvent) fastReadField41(buf []byte, _type int8) (offset int, err error) {
	if x.Counts == nil {
		x.Counts = make(map[string]float64)
	}
	var key string
	var value float64
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadDouble(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.Counts[key] = value
	return offset, nil
}

func (x *TrackerEvent) fastReadField42(buf []byte, _type int8) (offset int, err error) {
	var v TrackerStats
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.TrackerStats = &v
	return offset, nil
}

func (x *TrackerEvent) fastReadField43(buf []byte, _type int8) (offset int, err error) {
	if x.DomainBytes == nil {
		x.DomainBytes = make(map[string]uint64)
	}
	var key string
	var value uint64
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadUint64(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.DomainBytes[key] = value
	return offset, nil
}

func (x *WarriorMeta) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *WarriorMeta) fastWriteField1(buf []byte) (offset int) {
	if x.UserAgent == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.UserAgent)
	return offset
}

func (x *WarriorMeta) fastWriteField2(buf []byte) (offset int) {
	if x.Version == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.Version)
	return offset
}

func (x *TrackerStats) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *TrackerStats) fastWriteField1(buf []byte) (offset int) {
	if x.Values == nil {
		return offset
	}
	for k, v := range x.Values {
		offset += fastpb.WriteMapEntry(buf[offset:], 1,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteDouble(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *TrackerStats) fastWriteField2(buf []byte) (offset int) {
	if x.Queues == nil {
		return offset
	}
	for k, v := range x.Queues {
		offset += fastpb.WriteMapEntry(buf[offset:], 2,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteDouble(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *TrackerEvent) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField13(buf[offset:])
	offset += x.fastWriteField20(buf[offset:])
	offset += x.fastWriteField21(buf[offset:])
	offset += x.fastWriteField22(buf[offset:])
	offset += x.fastWriteField23(buf[offset:])
	offset += x.fastWriteField30(buf[offset:])
	offset += x.fastWriteField31(buf[offset:])
	offset += x.fastWriteField40(buf[offset:])
	offset += x.fastWriteField41(buf[offset:])
	offset += x.fastWriteField42(buf[offset:])
	offset += x.fastWriteField43(buf[offset:])
	return offset
}

func (x *TrackerEvent) fastWriteField1(buf []byte) (offset int) {
	if x.Project == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.Project)
	return offset
}

func (x *TrackerEvent) fastWriteField2(buf []byte) (offset int) {
	if x.Downloader == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.Downloader)
	return offset
}

func (x *TrackerEvent) fastWriteField3(buf []byte) (offset int) {
	if x.LogChannel == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.LogChannel)
	return offset
}

func (x *TrackerEvent) fastWriteField4(buf []byte) (offset int) {
	if x.Timestamp == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 4, x.Timestamp)
	return offset
}

func (x *TrackerEvent) fastWriteField10(buf []byte) (offset int) {
	if x.Bytes == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 10, x.Bytes)
	return offset
}

func (x *TrackerEvent) fastWriteField11(buf []byte) (offset int) {
	if x.SizeMb == 0 {
		return offset
	}
	offset += fastpb.WriteFloat(buf[offset:], 11, x.SizeMb)
	return offset
}

func (x *TrackerEvent) fastWriteField12(buf []byte) (offset int) {
	if !x.Valid {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 12, x.Valid)
	return offset
}

func (x *TrackerEvent) fastWriteField13(buf []byte) (offset int) {
	if !x.IsDuplicate {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 13, x.IsDuplicate)
	return offset
}

func (x *TrackerEvent) fastWriteField20(buf []byte) (offset int) {
	if x.Item == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 20, x.Item)
	return offset
}

func (x *TrackerEvent) fastWriteField21(buf []byte) (offset int) {
	if len(x.Items) == 0 {
		return offset
	}
	for i := range x.Items {
		offset += fastpb.WriteString(buf[offset:], 21, x.Items[i])
	}
	return offset
}

func (x *TrackerEvent) fastWriteField22(buf []byte) (offset int) {
	if len(x.MoveItems) == 0 {
		return offset
	}
	for i := range x.MoveItems {
		offset += fastpb.WriteString(buf[offset:], 22, x.MoveItems[i])
	}
	return offset
}

func (x *TrackerEvent) fastWriteField23(buf []byte) (offset int) {
	if len(x.ItemRtts) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 23, len(x.ItemRtts),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteDouble(buf[offset:], numTagOrKey, x.ItemRtts[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *TrackerEvent) fastWriteField30(buf []byte) (offset int) {
	if x.WarriorUserAgent == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 30, x.WarriorUserAgent)
	return offset
}

func (x *TrackerEvent) fastWriteField31(buf []byte) (offset int) {
	if x.WarriorVersion == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 31, x.WarriorVersion)
	return offset
}

func (x *TrackerEvent) fastWriteField40(buf []byte) (offset int) {
	if x.QueueStats == nil {
		return offset
	}
	for k, v := range x.QueueStats {
		offset += fastpb.WriteMapEntry(buf[offset:], 40,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteDouble(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *TrackerEvent) fastWriteField41(buf []byte) (offset int) {
	if x.Counts == nil {
		return offset
	}
	for k, v := range x.Counts {
		offset += fastpb.WriteMapEntry(buf[offset:], 41,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteDouble(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *TrackerEvent) fastWriteField42(buf []byte) (offset int) {
	if x.TrackerStats == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 42, x.TrackerStats)
	return offset
}

func (x *TrackerEvent) fastWriteField43(buf []byte) (offset int) {
	if x.DomainBytes == nil {
		return offset
	}
	for k, v := range x.DomainBytes {
		offset += fastpb.WriteMapEntry(buf[offset:], 43,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteUint64(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *WarriorMeta) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *WarriorMeta) sizeField1() (n int) {
	if x.UserAgent == "" {
		return n
	}
	n += fastpb.SizeString(1, x.UserAgent)
	return n
}

func (x *WarriorMeta) sizeField2() (n int) {
	if x.Version == "" {
		return n
	}
	n += fastpb.SizeString(2, x.Version)
	return n
}

func (x *TrackerStats) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *TrackerStats) sizeField1() (n int) {
	if x.Values == nil {
		return n
	}
	for k, v := range x.Values {
		n += fastpb.SizeMapEntry(1,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeDouble(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *TrackerStats) sizeField2() (n int) {
	if x.Queues == nil {
		return n
	}
	for k, v := range x.Queues {
		n += fastpb.SizeMapEntry(2,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeDouble(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *TrackerEvent) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField13()
	n += x.sizeField20()
	n += x.sizeField21()
	n += x.sizeField22()
	n += x.sizeField23()
	n += x.sizeField30()
	n += x.sizeField31()
	n += x.sizeField40()
	n += x.sizeField41()
	n += x.sizeField42()
	n += x.sizeField43()
	return n
}

func (x *TrackerEvent) sizeField1() (n int) {
	if x.Project == "" {
		return n
	}
	n += fastpb.SizeString(1, x.Project)
	return n
}

func (x *TrackerEvent) sizeField2() (n int) {
	if x.Downloader == "" {
		return n
	}
	n += fastpb.SizeString(2, x.Downloader)
	return n
}

func (x *TrackerEvent) sizeField3() (n int) {
	if x.LogChannel == "" {
		return n
	}
	n += fastpb.SizeString(3, x.LogChannel)
	return n
}

func (x *TrackerEvent) sizeField4() (n int) {
	if x.Timestamp == 0 {
		return n
	}
	n += fastpb.SizeDouble(4, x.Timestamp)
	return n
}

func (x *TrackerEvent) sizeField10() (n int) {
	if x.Bytes == 0 {
		return n
	}
	n += fastpb.SizeUint64(10, x.Bytes)
	return n
}

func (x *TrackerEvent) sizeField11() (n int) {
	if x.SizeMb == 0 {
		return n
	}
	n += fastpb.SizeFloat(11, x.SizeMb)
	return n
}

func (x *TrackerEvent) sizeField12() (n int) {
	if !x.Valid {
		return n
	}
	n += fastpb.SizeBool(12, x.Valid)
	return n
}

func (x *TrackerEvent) sizeField13() (n int) {
	if !x.IsDuplicate {
		return n
	}
	n += fastpb.SizeBool(13, x.IsDuplicate)
	return n
}

func (x *TrackerEvent) sizeField20() (n int) {
	if x.Item == "" {
		return n
	}
	n += fastpb.SizeString(20, x.Item)
	return n
}

func (x *TrackerEvent) sizeField21() (n int) {
	if len(x.Items) == 0 {
		return n
	}
	for i := range x.Items {
		n += fastpb.SizeString(21, x.Items[i])
	}
	return n
}

func (x *TrackerEvent) sizeField22() (n int) {
	if len(x.MoveItems) == 0 {
		return n
	}
	for i := range x.MoveItems {
		n += fastpb.SizeString(22, x.MoveItems[i])
	}
	return n
}

func (x *TrackerEvent) sizeField23() (n int) {
	if len(x.ItemRtts) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(23, len(x.ItemRtts),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeDouble(numTagOrKey, x.ItemRtts[numIdxOrVal])
			return n
		})
	return n
}

func (x *TrackerEvent) sizeField30() (n int) {
	if x.WarriorUserAgent == "" {
		return n
	}
	n += fastpb.SizeString(30, x.WarriorUserAgent)
	return n
}

func (x *TrackerEvent) sizeField31() (n int) {
	if x.WarriorVersion == "" {
		return n
	}
	n += fastpb.SizeString(31, x.WarriorVersion)
	return n
}

func (x *TrackerEvent) sizeField40() (n int) {
	if x.QueueStats == nil {
		return n
	}
	for k, v := range x.QueueStats {
		n += fastpb.SizeMapEntry(40,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeDouble(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *TrackerEvent) sizeField41() (n int) {
	if x.Counts == nil {
		return n
	}
	for k, v := range x.Counts {
		n += fastpb.SizeMapEntry(41,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeDouble(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *TrackerEvent) sizeField42() (n int) {
	if x.TrackerStats == nil {
		return n
	}
	n += fastpb.SizeMessage(42, x.TrackerStats)
	return n
}

func (x *TrackerEvent) sizeField43() (n int) {
	if x.DomainBytes == nil {
		return n
	}
	for k, v := range x.DomainBytes {
		n += fastpb.SizeMapEntry(43,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeUint64(numIdxOrVal, v)
				return n
			})
	}
	return n
}

var fieldIDToName_WarriorMeta = map[int32]string{
	1: "UserAgent",
	2: "Version",
}

var fieldIDToName_TrackerStats = map[int32]string{
	1: "Values",
	2: "Queues",
}

var fieldIDToName_TrackerEvent = map[int32]string{
	1:  "Project",
	2:  "Downloader",
	3:  "LogChannel",
	4:  "Timestamp",
	10: "Bytes",
	11: "SizeMb",
	12: "Valid",
	13: "IsDuplicate",
	20: "Item",
	21: "Items",
	22: "MoveItems",
	23: "ItemRtts",
	30: "WarriorUserAgent",
	31: "WarriorVersion",
	40: "QueueStats",
	41: "Counts",
	42: "TrackerStats",
	43: "DomainBytes",
}
